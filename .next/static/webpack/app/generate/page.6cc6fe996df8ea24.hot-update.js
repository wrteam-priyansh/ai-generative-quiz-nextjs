"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/generate/page",{

/***/ "(app-pages-browser)/./src/services/formsService.ts":
/*!**************************************!*\
  !*** ./src/services/formsService.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formsService: () => (/* binding */ formsService)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./src/services/api.ts\");\n/* harmony import */ var _authService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./authService */ \"(app-pages-browser)/./src/services/authService.ts\");\n\n\nconst formsService = {\n    // Create Google Form from quiz questions\n    createFormFromQuiz: async function(questions, formTitle, formDescription) {\n        let isQuiz = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;\n        var _credentials_access_token;\n        const credentials = _authService__WEBPACK_IMPORTED_MODULE_1__.authService.getStoredCredentials();\n        console.log('Retrieved credentials for Forms API:', {\n            hasAccessToken: !!credentials.access_token,\n            tokenLength: (_credentials_access_token = credentials.access_token) === null || _credentials_access_token === void 0 ? void 0 : _credentials_access_token.length,\n            expiresAt: credentials.token_expires_at,\n            currentTime: Date.now(),\n            isExpired: credentials.token_expires_at ? Date.now() > parseInt(credentials.token_expires_at) : 'no expiry',\n            hasCredentialsJson: !!credentials.credentials_json,\n            userInfo: credentials.user_info\n        });\n        if (!credentials.access_token) {\n            throw new Error('No Google access token found. Please authenticate first.');\n        }\n        // Check if token is expired\n        if (credentials.token_expires_at && Date.now() > parseInt(credentials.token_expires_at)) {\n            throw new Error('Access token has expired. Please re-authenticate.');\n        }\n        // Validate that we have sufficient credentials for Forms API\n        if (!credentials.credentials_json) {\n            console.warn('No credentials JSON found, this might cause authentication issues');\n        }\n        const params = new URLSearchParams();\n        if (formTitle) params.append('form_title', formTitle);\n        if (formDescription) params.append('form_description', formDescription);\n        params.append('is_quiz', isQuiz.toString());\n        console.log('Making Forms API request with:', {\n            url: '/forms/create-from-quiz',\n            questionsCount: questions.length,\n            params: Object.fromEntries(params),\n            authHeader: \"Bearer \".concat(credentials.access_token.substring(0, 20), \"...\")\n        });\n        // Based on backend error \"Invalid credentials format\", send credentials as expected\n        const authHeaders = {\n            'Content-Type': 'application/json'\n        };\n        // The backend expects the full credentials JSON string in the authorization header\n        if (credentials.credentials_json) {\n            console.log('Sending credentials JSON to backend...');\n            authHeaders['authorization'] = credentials.credentials_json;\n        } else {\n            console.warn('No credentials JSON available, backend requires full credentials format');\n            throw new Error('Missing credentials JSON required for Google Forms API');\n        }\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post('/forms/create-from-quiz', questions, {\n                headers: authHeaders,\n                params: Object.fromEntries(params)\n            });\n            console.log('Forms API response:', response.data);\n            return response.data;\n        } catch (error) {\n            var _error_response, _error_response1, _error_response2, _error_response3, _error_response4, _error_response5, _error_response_data, _error_response6, _error_response_data1, _error_response7;\n            console.error('Forms API error:', error);\n            console.error('Full error details:', {\n                status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n                statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n                data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n                headers: (_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.headers,\n                requestHeaders: authHeaders,\n                requestUrl: '/forms/create-from-quiz',\n                requestParams: Object.fromEntries(params)\n            });\n            // Handle authentication errors specifically\n            if (((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.status) === 401) {\n                // Clear the stored credentials since they're invalid\n                _authService__WEBPACK_IMPORTED_MODULE_1__.authService.clearCredentials();\n                throw new Error('Authentication failed. Please log in with Google again.');\n            } else if (((_error_response5 = error.response) === null || _error_response5 === void 0 ? void 0 : _error_response5.status) === 403) {\n                throw new Error('Permission denied. Please ensure you have granted the necessary permissions.');\n            } else if ((_error_response6 = error.response) === null || _error_response6 === void 0 ? void 0 : (_error_response_data = _error_response6.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) {\n                throw new Error(error.response.data.message);\n            } else if ((_error_response7 = error.response) === null || _error_response7 === void 0 ? void 0 : (_error_response_data1 = _error_response7.data) === null || _error_response_data1 === void 0 ? void 0 : _error_response_data1.error) {\n                throw new Error(error.response.data.error);\n            } else {\n                throw new Error(\"Failed to create Google Form: \".concat(error.message || 'Unknown error'));\n            }\n        }\n    },\n    // Get form responses\n    getFormResponses: async (formId)=>{\n        const { access_token } = _authService__WEBPACK_IMPORTED_MODULE_1__.authService.getStoredCredentials();\n        if (!access_token) {\n            throw new Error('No Google access token found. Please authenticate first.');\n        }\n        const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/forms/\".concat(formId, \"/responses\"), {\n            headers: {\n                'Authorization': \"Bearer \".concat(access_token)\n            }\n        });\n        return response.data;\n    },\n    // Delete form\n    deleteForm: async (formId)=>{\n        const { access_token } = _authService__WEBPACK_IMPORTED_MODULE_1__.authService.getStoredCredentials();\n        if (!access_token) {\n            throw new Error('No Google access token found. Please authenticate first.');\n        }\n        const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].delete(\"/forms/\".concat(formId), {\n            headers: {\n                'Authorization': \"Bearer \".concat(access_token)\n            }\n        });\n        return response.data;\n    },\n    // Get forms integration info\n    getFormsInfo: async ()=>{\n        const response = await _api__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get('/forms/');\n        return response.data;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/formsService.ts\n"));

/***/ })

});